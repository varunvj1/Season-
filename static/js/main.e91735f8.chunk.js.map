{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,eAyBCE,EAZO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAID,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,gCAAMD,EAAN,KACA,uBAAGU,UAAS,6BAAwBT,EAAxB,aC7BZU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACnB,yBAAKA,UAAU,sBAAf,IAAsCN,EAAMQ,QAA5C,OAOJD,EAAQE,aAAe,CACnBD,QAAQ,cAGGD,QCXTG,E,4MACJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,+BAK3C,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,uCAAaqB,KAAKX,MAAMC,aAAxB,KAGLU,KAAKX,MAAMV,MAAQqB,KAAKX,MAAMC,aACzB,kBAAC,EAAD,CAAeX,IAAKqB,KAAKX,MAAMV,MAEjC,kBAAC,EAAD,CAASO,QAAQ,uC,GAlBVe,IAAMC,WAsBxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.e91735f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SeasonDisplay.css\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: \"sun\"\r\n  },\r\n  winter: {\r\n    text: \"Burr, it's chilly!\",\r\n    iconName: \"snowflake\"\r\n  }\r\n};\r\n\r\n//Returns which season it is\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = props => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1> {text} </h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\nexport default SeasonDisplay;\r\n","import React from \"react\"\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n    <div className=\"ui big text loader\"> {props.message} </div>\r\n  </div>\r\n    )\r\n}\r\n\r\n\r\n//Default text for loader\r\nSpinner.defaultProps = {\r\n    message:\"Loading...\"\r\n}\r\n\r\nexport default Spinner","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass App extends React.Component {\r\n  state = { lat: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position => this.setState({ lat: position.coords.latitude }),\r\n      err => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error: {this.state.errorMessage} </div>;\r\n    }\r\n\r\n    if (this.state.lat && !this.state.errorMessage) {\r\n      return <SeasonDisplay lat={this.state.lat} />;\r\n    }\r\n    return <Spinner message=\"Please accept location request\" />;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}